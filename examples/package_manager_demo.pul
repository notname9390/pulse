(* Pulse Package Manager Demo - Example Usage *)

(* This example demonstrates the new Pulse package manager features:
   - Library imports via URLs
   - Multi-target compilation
   - External library fetching
*)

(* Library declarations - these will be fetched by the package manager *)
libs = {
    math_utils == "https://math-utils.pulse.dev",
    web_framework == "https://web-framework.pulse.dev",
    data_structures == "https://data-structs.pulse.dev"
}

(* Build targets for multi-platform compilation *)
compile = native    (* Current platform *)
compile = win       (* Windows target *)
compile = linux     (* Linux target *)
compile = macos     (* macOS target *)

(* Main program that uses the imported libraries *)
def main():
    out("Pulse Package Manager Demo")
    out("==========================")
    
    (* Use math utilities from imported library *)
    result = math_utils.add(10, 20)
    out("Math result: " + str(result))
    
    (* Use web framework components *)
    server = web_framework.create_server(8080)
    out("Web server created on port: " + str(server.port))
    
    (* Use data structures *)
    list = data_structures.create_list()
    list.add("Hello")
    list.add("World")
    out("List contents: " + str(list))
    
    (* Demonstrate cross-platform functionality *)
    platform = get_platform()
    out("Running on platform: " + platform)
    
    if platform == "windows":
        out("Windows-specific features enabled")
    elif platform == "linux":
        out("Linux-specific features enabled")
    elif platform == "macos":
        out("macOS-specific features enabled")
    
    out("Demo completed successfully!")

(* Platform detection function *)
def get_platform() -> str:
    (* This would be implemented by the runtime *)
    return "native"

(* Entry point *)
if __name__ == "__main__":
    main() 